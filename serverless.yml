service: appointment-backend

frameworkVersion: '4'

provider:
  name: aws
  runtime: nodejs20.x
  region: us-east-1
  stage: ${opt:stage, 'dev'}
  environment:
    NODE_ENV: ${opt:stage, 'dev'}
    STAGE: ${opt:stage, 'dev'}
    REGION: ${aws:region}
    SERVICE_NAME: ${self:service}
    API_VERSION: '1.0.0'
  iam:
    role:
      statements:
        # CloudWatch Logs permissions
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogGroups
            - logs:DescribeLogStreams
          Resource: 
            - arn:aws:logs:${aws:region}:${aws:accountId}:log-group:/aws/lambda/*
        # DynamoDB permissions (para futuras integraciones)
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: 
            - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:service}-${self:provider.stage}-*
        # S3 permissions (para assets y backups)
        - Effect: Allow
          Action:
            - s3:GetObject
            - s3:PutObject
            - s3:DeleteObject
          Resource: 
            - arn:aws:s3:::${self:service}-${self:provider.stage}-*/*
  httpApi:
    cors:
      allowedOrigins:
        - https://localhost:3000
        - https://127.0.0.1:3000
        - http://localhost:3000
        - http://127.0.0.1:3000
      allowedHeaders:
        - Content-Type
        - X-Amz-Date
        - Authorization
        - X-Api-Key
        - X-Amz-Security-Token
        - X-Amz-User-Agent
        - Accept
        - Access-Control-Allow-Origin
      allowedMethods:
        - GET
        - POST
        - PUT
        - PATCH
        - DELETE
        - OPTIONS
      allowCredentials: true
  logs:
    httpApi: true
  tracing:
    lambda: true

plugins:
  - serverless-offline

functions:
  hello:
    handler: dist/handlers/hello.handler
    events:
      - httpApi:
          path: /hello
          method: get
    timeout: 10
    memorySize: 128

  createAppointment:
    handler: dist/handlers/appointments.create
    events:
      - httpApi:
          path: /appointments
          method: post
    timeout: 25
    memorySize: 256

  getAppointments:
    handler: dist/handlers/appointments.list
    events:
      - httpApi:
          path: /appointments
          method: get
    timeout: 25
    memorySize: 256

  getAppointment:
    handler: dist/handlers/appointments.get
    events:
      - httpApi:
          path: /appointments/{id}
          method: get
    timeout: 15
    memorySize: 128

  updateAppointment:
    handler: dist/handlers/appointments.update
    events:
      - httpApi:
          path: /appointments/{id}
          method: put
    timeout: 25
    memorySize: 256

  deleteAppointment:
    handler: dist/handlers/appointments.remove
    events:
      - httpApi:
          path: /appointments/{id}
          method: delete
    timeout: 15
    memorySize: 128

  getAppointmentStats:
    handler: dist/handlers/appointments.stats
    events:
      - httpApi:
          path: /appointments/stats
          method: get
    timeout: 15
    memorySize: 128

  confirmAppointment:
    handler: dist/handlers/appointments.confirm
    events:
      - httpApi:
          path: /appointments/{id}/confirm
          method: patch
    timeout: 15
    memorySize: 128

  cancelAppointment:
    handler: dist/handlers/appointments.cancel
    events:
      - httpApi:
          path: /appointments/{id}/cancel
          method: patch
    timeout: 15
    memorySize: 128

  swaggerUI:
    handler: dist/handlers/swagger.docs
    events:
      - httpApi:
          path: /docs
          method: get
    timeout: 10
    memorySize: 128

  swaggerJSON:
    handler: dist/handlers/swagger.apiDocs
    events:
      - httpApi:
          path: /api-docs.json
          method: get
    timeout: 10
    memorySize: 128

  awsHealth:
    handler: dist/handlers/aws-health.checkAWSHealth
    events:
      - httpApi:
          path: /aws-health
          method: get
    timeout: 15
    memorySize: 128

  awsConfig:
    handler: dist/handlers/aws-health.checkAWSConfig
    events:
      - httpApi:
          path: /aws-config
          method: get
    timeout: 10
    memorySize: 128

  awsConnectivity:
    handler: dist/handlers/aws-health.testAWSConnectivity
    events:
      - httpApi:
          path: /aws-connectivity
          method: get
    timeout: 15
    memorySize: 128

custom:
  serverless-offline:
    httpPort: 3000
    host: 0.0.0.0
    corsAllowHeaders: "accept,content-type,x-api-key,authorization"
    corsAllowOrigin: "*"

package:
  patterns:
    - '!node_modules/**'
    - '!.git/**'
    - '!.github/**'
    - '!.vscode/**'
    - '!tests/**'
    - '!*.md'
